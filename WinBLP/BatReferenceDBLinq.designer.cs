#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinBLPdB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BatReferenceDB")]
	public partial class BatReferenceDBLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBat(Bat instance);
    partial void UpdateBat(Bat instance);
    partial void DeleteBat(Bat instance);
    partial void InsertBatCommonName(BatCommonName instance);
    partial void UpdateBatCommonName(BatCommonName instance);
    partial void DeleteBatCommonName(BatCommonName instance);
    partial void InsertBatTag(BatTag instance);
    partial void UpdateBatTag(BatTag instance);
    partial void DeleteBatTag(BatTag instance);
    #endregion
		
		public BatReferenceDBLinqDataContext() : 
				base(global::WinBLPdB.Properties.Settings.Default.BatReferenceDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BatReferenceDBLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BatReferenceDBLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BatReferenceDBLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BatReferenceDBLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bat> Bats
		{
			get
			{
				return this.GetTable<Bat>();
			}
		}
		
		public System.Data.Linq.Table<BatCommonName> BatCommonNames
		{
			get
			{
				return this.GetTable<BatCommonName>();
			}
		}
		
		public System.Data.Linq.Table<BatTag> BatTags
		{
			get
			{
				return this.GetTable<BatTag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bat")]
	public partial class Bat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Batgenus;
		
		private string _BatSpecies;
		
		private System.Nullable<int> _SortIndex;
		
		private EntitySet<BatCommonName> _BatCommonNames;
		
		private EntitySet<BatTag> _BatTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBatgenusChanging(string value);
    partial void OnBatgenusChanged();
    partial void OnBatSpeciesChanging(string value);
    partial void OnBatSpeciesChanged();
    partial void OnSortIndexChanging(System.Nullable<int> value);
    partial void OnSortIndexChanged();
    #endregion
		
		public Bat()
		{
			this._BatCommonNames = new EntitySet<BatCommonName>(new Action<BatCommonName>(this.attach_BatCommonNames), new Action<BatCommonName>(this.detach_BatCommonNames));
			this._BatTags = new EntitySet<BatTag>(new Action<BatTag>(this.attach_BatTags), new Action<BatTag>(this.detach_BatTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Batgenus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Batgenus
		{
			get
			{
				return this._Batgenus;
			}
			set
			{
				if ((this._Batgenus != value))
				{
					this.OnBatgenusChanging(value);
					this.SendPropertyChanging();
					this._Batgenus = value;
					this.SendPropertyChanged("Batgenus");
					this.OnBatgenusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatSpecies", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BatSpecies
		{
			get
			{
				return this._BatSpecies;
			}
			set
			{
				if ((this._BatSpecies != value))
				{
					this.OnBatSpeciesChanging(value);
					this.SendPropertyChanging();
					this._BatSpecies = value;
					this.SendPropertyChanged("BatSpecies");
					this.OnBatSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortIndex", DbType="Int")]
		public System.Nullable<int> SortIndex
		{
			get
			{
				return this._SortIndex;
			}
			set
			{
				if ((this._SortIndex != value))
				{
					this.OnSortIndexChanging(value);
					this.SendPropertyChanging();
					this._SortIndex = value;
					this.SendPropertyChanged("SortIndex");
					this.OnSortIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bat_BatCommonName", Storage="_BatCommonNames", ThisKey="Id", OtherKey="BatID")]
		public EntitySet<BatCommonName> BatCommonNames
		{
			get
			{
				return this._BatCommonNames;
			}
			set
			{
				this._BatCommonNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bat_BatTag", Storage="_BatTags", ThisKey="Id", OtherKey="BatID")]
		public EntitySet<BatTag> BatTags
		{
			get
			{
				return this._BatTags;
			}
			set
			{
				this._BatTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatCommonNames(BatCommonName entity)
		{
			this.SendPropertyChanging();
			entity.Bat = this;
		}
		
		private void detach_BatCommonNames(BatCommonName entity)
		{
			this.SendPropertyChanging();
			entity.Bat = null;
		}
		
		private void attach_BatTags(BatTag entity)
		{
			this.SendPropertyChanging();
			entity.Bat = this;
		}
		
		private void detach_BatTags(BatTag entity)
		{
			this.SendPropertyChanging();
			entity.Bat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatCommonNames")]
	public partial class BatCommonName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BatCommonName1;
		
		private int _BatID;
		
		private short _SortIndex;
		
		private EntityRef<Bat> _Bat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBatCommonName1Changing(string value);
    partial void OnBatCommonName1Changed();
    partial void OnBatIDChanging(int value);
    partial void OnBatIDChanged();
    partial void OnSortIndexChanging(short value);
    partial void OnSortIndexChanged();
    #endregion
		
		public BatCommonName()
		{
			this._Bat = default(EntityRef<Bat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BatCommonName", Storage="_BatCommonName1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BatCommonName1
		{
			get
			{
				return this._BatCommonName1;
			}
			set
			{
				if ((this._BatCommonName1 != value))
				{
					this.OnBatCommonName1Changing(value);
					this.SendPropertyChanging();
					this._BatCommonName1 = value;
					this.SendPropertyChanged("BatCommonName1");
					this.OnBatCommonName1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatID", DbType="Int NOT NULL")]
		public int BatID
		{
			get
			{
				return this._BatID;
			}
			set
			{
				if ((this._BatID != value))
				{
					if (this._Bat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatIDChanging(value);
					this.SendPropertyChanging();
					this._BatID = value;
					this.SendPropertyChanged("BatID");
					this.OnBatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortIndex", DbType="SmallInt NOT NULL")]
		public short SortIndex
		{
			get
			{
				return this._SortIndex;
			}
			set
			{
				if ((this._SortIndex != value))
				{
					this.OnSortIndexChanging(value);
					this.SendPropertyChanging();
					this._SortIndex = value;
					this.SendPropertyChanged("SortIndex");
					this.OnSortIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bat_BatCommonName", Storage="_Bat", ThisKey="BatID", OtherKey="Id", IsForeignKey=true)]
		public Bat Bat
		{
			get
			{
				return this._Bat.Entity;
			}
			set
			{
				Bat previousValue = this._Bat.Entity;
				if (((previousValue != value) 
							|| (this._Bat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bat.Entity = null;
						previousValue.BatCommonNames.Remove(this);
					}
					this._Bat.Entity = value;
					if ((value != null))
					{
						value.BatCommonNames.Add(this);
						this._BatID = value.Id;
					}
					else
					{
						this._BatID = default(int);
					}
					this.SendPropertyChanged("Bat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatTag")]
	public partial class BatTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BatTag1;
		
		private int _BatID;
		
		private System.Nullable<short> _SortIndex;
		
		private EntityRef<Bat> _Bat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBatTag1Changing(string value);
    partial void OnBatTag1Changed();
    partial void OnBatIDChanging(int value);
    partial void OnBatIDChanged();
    partial void OnSortIndexChanging(System.Nullable<short> value);
    partial void OnSortIndexChanged();
    #endregion
		
		public BatTag()
		{
			this._Bat = default(EntityRef<Bat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BatTag", Storage="_BatTag1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BatTag1
		{
			get
			{
				return this._BatTag1;
			}
			set
			{
				if ((this._BatTag1 != value))
				{
					this.OnBatTag1Changing(value);
					this.SendPropertyChanging();
					this._BatTag1 = value;
					this.SendPropertyChanged("BatTag1");
					this.OnBatTag1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatID", DbType="Int NOT NULL")]
		public int BatID
		{
			get
			{
				return this._BatID;
			}
			set
			{
				if ((this._BatID != value))
				{
					if (this._Bat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatIDChanging(value);
					this.SendPropertyChanging();
					this._BatID = value;
					this.SendPropertyChanged("BatID");
					this.OnBatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortIndex", DbType="SmallInt")]
		public System.Nullable<short> SortIndex
		{
			get
			{
				return this._SortIndex;
			}
			set
			{
				if ((this._SortIndex != value))
				{
					this.OnSortIndexChanging(value);
					this.SendPropertyChanging();
					this._SortIndex = value;
					this.SendPropertyChanged("SortIndex");
					this.OnSortIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bat_BatTag", Storage="_Bat", ThisKey="BatID", OtherKey="Id", IsForeignKey=true)]
		public Bat Bat
		{
			get
			{
				return this._Bat.Entity;
			}
			set
			{
				Bat previousValue = this._Bat.Entity;
				if (((previousValue != value) 
							|| (this._Bat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bat.Entity = null;
						previousValue.BatTags.Remove(this);
					}
					this._Bat.Entity = value;
					if ((value != null))
					{
						value.BatTags.Add(this);
						this._BatID = value.Id;
					}
					else
					{
						this._BatID = default(int);
					}
					this.SendPropertyChanged("Bat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
